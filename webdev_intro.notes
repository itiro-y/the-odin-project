# HTML - Hyper Text Markup Language
    - The structure and content of your webpage
    - Tags: <p> </p> ...
        - Self-closing tags: </br> </img> even <br> <img>
    - Using correct elements for content is called semantic HTML

# Format

[html]

<!DOCTYPE html>
<html> 
    <head>
    </head>
    <body>
        <h1> </h1>
        <h2> </h2>
        <h3> </h3>
        <p> </p>
        <u1>
            <li> </li>
            <li> </li>
        </u1>
    </body>
</html>

[/html]

# CSS - Cascading Style Sheets
    - Improve appearance of a web page
    - CSS Selectors: select an element an alter its appearance

    - ruleset:
        selector{
            property: value;
        }

    - ex:
        [css]
        div.bold-text{
            font-weight: bold;
            color: red;
            height: 200px;
        }
        [/css]

    - *{} - universal selector 
    
    - targetting a class
        .class{...} 
    
    - targetting an id (unlike a class, its name must be unique) (!better to use class for targetting!)
        #id{...}

    - targetting multiple Selectors
        h1, a {...}
    
    - targetting multiple classes
        .class1, class2{...}

    - chaining selectors
        .class1.class12
    
    - targetting selectors within a specific class
        .class selector1 selector2, .class selector2{...}

    - Cascade from the C in CSS:
        - Specificity - A CSS declaration that is more specific will take precedence over less specific ones
            1. ID selectors (most specific selector)
            2. Class selectors
            3. Type selectors

    - divs and spans
        - divs for general blocks of things
        - spans for blocks of something within a text
        - important when using display:blocks-inline!
    
    - display: flex
        - flex: flex-grow, flex-shrink, flex-basis
            - flex: 1 -> 1, 1, 0
        - To center our box we use the !align-items! property to align our item on the cross axis, which in this 
        case is the block axis running vertically. We use !justify-content! to align the item on the main axis


# JavaScript
    - The programming language
    - You program actions, conditions, calculations, network requests, concurrent tasks and many other kind of
    instructions

    - Access elements through DOM (DOcument Object Model API)
        - Tree-like representation of the web page

    - Variables
        - let / const

    - Functions
        - Arrow Functions
            - let func = function(arg1, arg2, ..., argN) {
                return expression; };
    
    - Loops
        - forEach((parameter1, parameter2, ...) => {what to do with each item})
    
    - Arrays
        - useful methods
            - length, includes(), push(), pop(), filter()

    - Rest operator
        -  ...elements as parameter turns the parameters separated with a comma into an array of those items

    - Acessing DOM
        - element.querySelector(selector) -> returns a reference to the first match of selector  
            - ex. 
                html
                <div id='container'>blabla</div>

                js
                const container = document.querySelector('#container');
        
        - element.querySelectorAll(selectors) returns a “nodelist” containing references to all of the matches of the selectors
            - can convert the nodelist into an array using .from()

        

    
        